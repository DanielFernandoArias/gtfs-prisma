generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agency {
  tc_agency_id    String   @unique
  id              Int      @id @default(autoincrement())
  agency_id       String?
  agency_name     String
  agency_url      String
  agency_timezone String
  agency_lang     String?
  agency_phone    String?
  agency_fare_url String?
  agency_email    String?
  updated_at      DateTime
}

model areas {
  tc_agency_id String
  area_id      String   @id
  area_name    String?
  updated_at   DateTime
}

model calendar {
  tc_agency_id String
  service_id   String   @id
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  end_date     Int
  start_date   Int
  updated_at   DateTime

  @@index([end_date], map: "idx_calendar_end_date")
  @@index([start_date], map: "idx_calendar_start_date")
}

model calendar_dates {
  tc_agency_id   String
  id             Int      @id @default(autoincrement())
  service_id     String
  date           Int
  exception_type Int
  holiday_name   String?
  updated_at     DateTime

  @@index([exception_type], map: "idx_calendar_dates_exception_type")
  @@index([date], map: "idx_calendar_dates_date")
  @@index([service_id], map: "idx_calendar_dates_service_id")
}

model deadhead_times {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  deadhead_id         String
  arrival_time        String
  arrival_timestamp   Int?
  departure_time      String
  departure_timestamp Int?
  ops_location_id     String?
  stop_id             String?
  location_sequence   Int
  shape_dist_traveled Float?
  updated_at          DateTime

  @@index([location_sequence], map: "idx_deadhead_times_location_sequence")
  @@index([departure_timestamp], map: "idx_deadhead_times_departure_timestamp")
  @@index([arrival_timestamp], map: "idx_deadhead_times_arrival_timestamp")
  @@index([deadhead_id], map: "idx_deadhead_times_deadhead_id")
}

model deadheads {
  tc_agency_id     String
  deadhead_id      String   @id
  service_id       String
  block_id         String
  shape_id         String?
  to_trip_id       String?
  from_trip_id     String?
  to_deadhead_id   String?
  from_deadhead_id String?
  updated_at       DateTime

  @@index([from_deadhead_id], map: "idx_deadheads_from_deadhead_id")
  @@index([to_deadhead_id], map: "idx_deadheads_to_deadhead_id")
  @@index([from_trip_id], map: "idx_deadheads_from_trip_id")
  @@index([to_trip_id], map: "idx_deadheads_to_trip_id")
  @@index([shape_id], map: "idx_deadheads_shape_id")
  @@index([block_id], map: "idx_deadheads_block_id")
}

model directions {
  tc_agency_id String
  id           Int      @id @default(autoincrement())
  route_id     String
  direction_id Int?
  direction    String
  updated_at   DateTime

  @@index([direction_id], map: "idx_directions_direction_id")
  @@index([route_id], map: "idx_directions_route_id")
}

model fare_attributes {
  tc_agency_id      String
  fare_id           String   @id
  price             Float
  currency_type     String
  payment_method    Int
  transfers         Int?
  agency_id         String?
  transfer_duration Int?
  updated_at        DateTime
}

model fare_products {
  tc_agency_id      String
  fare_product_id   String   @id
  fare_product_name String?
  amount            Float
  currency          String
  updated_at        DateTime
}

model fare_rules {
  tc_agency_id   String
  id             Int      @id @default(autoincrement())
  fare_id        String
  route_id       String?
  origin_id      String?
  destination_id String?
  contains_id    String?
  updated_at     DateTime
}

model feed_info {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  feed_publisher_name String
  feed_publisher_url  String
  feed_lang           String
  default_lang        String?
  feed_start_date     Int?
  feed_end_date       Int?
  feed_version        String?
  feed_contact_email  String?
  feed_contact_url    String?
  updated_at          DateTime
}

model frequencies {
  tc_agency_id    String
  id              Int      @id @default(autoincrement())
  trip_id         String
  start_time      String
  start_timestamp Int?
  end_time        String
  end_timestamp   Int?
  headway_secs    Int
  exact_times     Int?
  updated_at      DateTime

  @@index([trip_id], map: "idx_frequencies_trip_id")
}

model levels {
  tc_agency_id String
  level_id     String   @id
  level_index  Float
  level_name   String?
  updated_at   DateTime
}

model ops_locations {
  tc_agency_id      String
  ops_location_id   String   @id
  ops_location_code String?
  ops_location_name String
  ops_location_desc String?
  ops_location_lat  Float
  ops_location_lon  Float
  updated_at        DateTime
}

model pathways {
  tc_agency_id           String
  pathway_id             String   @id
  from_stop_id           String
  to_stop_id             String
  pathway_mode           Int
  is_bidirectional       Int
  length                 Float?
  traversal_time         Int?
  stair_count            Int?
  max_slope              Float?
  min_width              Float?
  signposted_as          String?
  reversed_signposted_as String?
  updated_at             DateTime
}

model routes {
  route_id            String   @id
  agency_id           String?
  route_short_name    String?
  route_long_name     String?
  route_desc          String?
  route_type          Int
  route_url           String?
  route_color         String?
  route_text_color    String?
  route_sort_order    Int?
  continuous_pickup   Int?
  continuous_drop_off Int?
  network_id          String?
  tc_agency_id        String
  updated_at          DateTime
}

model run_event {
  tc_agency_id             String
  run_event_id             String   @id
  piece_id                 String
  event_type               Int
  event_name               String?
  event_time               String
  event_duration           Int
  event_from_location_type Int?
  event_from_location_id   String?
  event_to_location_type   Int?
  event_to_location_id     String?
  updated_at               DateTime

  @@index([event_to_location_type], map: "idx_run_event_event_to_location_type")
  @@index([event_from_location_type], map: "idx_run_event_event_from_location_type")
  @@index([event_type], map: "idx_run_event_event_type")
}

model runs_pieces {
  tc_agency_id        String
  run_id              String
  piece_id            String   @id
  start_type          Int
  start_trip_id       String
  start_trip_position Int?
  end_type            Int
  end_trip_id         String
  end_trip_position   Int?
  updated_at          DateTime

  @@index([end_trip_id], map: "idx_runs_pieces_end_trip_id")
  @@index([end_type], map: "idx_runs_pieces_end_type")
  @@index([start_trip_id], map: "idx_runs_pieces_start_trip_id")
  @@index([start_type], map: "idx_runs_pieces_start_type")
}

model service_alert_targets {
  tc_agency_id String
  alert_id     String   @id
  stop_id      String?
  route_id     String?
  isUpdated    Int      @default(1)
  updated_at   DateTime

  @@index([route_id], map: "idx_service_alert_targets_route_id")
  @@index([stop_id], map: "idx_service_alert_targets_stop_id")
  @@index([alert_id], map: "idx_service_alert_targets_alert_id")
}

model service_alerts {
  tc_agency_id String
  id           String   @id
  cause        Int
  start_time   String
  end_time     String
  headline     String
  description  String
  isUpdated    Int      @default(1)
  updated_at   DateTime

  @@index([id], map: "idx_service_alerts_id")
}

model shapes {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  shape_id            String
  shape_pt_lat        Float
  shape_pt_lon        Float
  shape_pt_sequence   Int
  shape_dist_traveled Float? // had to convert from Float?
  updated_at          DateTime

  @@index([shape_id], map: "idx_shapes_shape_id")
}

model stop_attributes {
  tc_agency_id String
  id           Int      @id @default(autoincrement())
  stop_id      String
  stop_city    String?
  updated_at   DateTime

  @@index([stop_id], map: "idx_stop_attributes_stop_id")
}

model stop_times {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  trip_id             String
  arrival_time        String?
  arrival_timestamp   Int? // had to convert this from Int?
  departure_time      String?
  departure_timestamp Int? // had to convert this from Int?
  stop_id             String
  stop_sequence       Int
  stop_headsign       String?
  pickup_type         Int? // had to convert this from Int?
  drop_off_type       Int? // had to convert this from Int?
  continuous_pickup   Int? // had to convert this from Int?
  continuous_drop_off Int? // had to convert this from Int?
  shape_dist_traveled Float? // had to convert this from Float?
  timepoint           Int? // had to convert this from Int?
  updated_at          DateTime

  @@index([stop_sequence], map: "idx_stop_times_stop_sequence")
  @@index([departure_timestamp], map: "idx_stop_times_departure_timestamp")
  @@index([arrival_timestamp], map: "idx_stop_times_arrival_timestamp")
  @@index([trip_id], map: "idx_stop_times_trip_id")
}

model stops {
  tc_agency_id        String
  stop_id             String   @id
  stop_code           String?
  stop_name           String?
  tts_stop_name       String?
  stop_desc           String?
  stop_lat            Float? // Had to change this from Float?
  stop_lon            Float? // Had to change this from Float?
  zone_id             String?
  stop_url            String?
  location_type       Int? // Had to change this from Int?
  parent_station      String?
  stop_timezone       String?
  wheelchair_boarding Int? // Had to change this from Int?
  level_id            String?
  platform_code       String?
  updated_at          DateTime
  geom                Unsupported("geometry(Point, 4326)")? // https://github.com/prisma/prisma/issues/1798

  @@index([parent_station], map: "idx_stops_parent_station")
  @@index([geom], name: "stops_idx", type: Gist)

}

model timetable_stop_order {
  tc_agency_id  String
  id            Int      @id @default(autoincrement())
  timetable_id  String?
  stop_id       String?
  stop_sequence Int?
  updated_at    DateTime

  @@index([stop_sequence], map: "idx_timetable_stop_order_stop_sequence")
  @@index([timetable_id], map: "idx_timetable_stop_order_timetable_id")
}

model timetables {
  tc_agency_id           String
  id                     Int      @id @default(autoincrement())
  timetable_id           String?
  route_id               String?
  direction_id           Int?
  start_date             Int?
  end_date               Int?
  monday                 Int
  tuesday                Int
  wednesday              Int
  thursday               Int
  friday                 Int
  saturday               Int
  sunday                 Int
  start_time             String?
  start_timestamp        Int?
  end_time               String?
  end_timestamp          Int?
  timetable_label        String?
  service_notes          String?
  orientation            String?
  timetable_page_id      String?
  timetable_sequence     Int?
  direction_name         String?
  include_exceptions     Int?
  show_trip_continuation Int?
  updated_at             DateTime

  @@index([timetable_sequence], map: "idx_timetables_timetable_sequence")
}

model transfers {
  tc_agency_id      String
  id                Int      @id @default(autoincrement())
  from_stop_id      String?
  to_stop_id        String?
  from_route_id     String?
  to_route_id       String?
  from_trip_id      String?
  to_trip_id        String?
  transfer_type     Int?
  min_transfer_time Int?
  updated_at        DateTime

  @@index([to_stop_id], map: "idx_transfers_to_stop_id")
  @@index([from_stop_id], map: "idx_transfers_from_stop_id")
}

model translations {
  tc_agency_id  String
  id            Int      @id @default(autoincrement())
  table_name    String
  field_name    String
  language      String
  translation   String
  record_id     String?
  record_sub_id String?
  field_value   String?
  updated_at    DateTime
}

model trip_updates {
  tc_agency_id String
  update_id    String   @id
  vehicle_id   String?
  trip_id      String?
  start_date   String?
  timestamp    String?
  isUpdated    Int      @default(1)
  updated_at   DateTime

  @@index([trip_id], map: "idx_trip_updates_trip_id")
  @@index([vehicle_id], map: "idx_trip_updates_vehicle_id")
  @@index([update_id], map: "idx_trip_updates_update_id")
}

model trips {
  tc_agency_id          String
  route_id              String
  service_id            String
  trip_id               String   @id
  trip_headsign         String?
  trip_short_name       String?
  direction_id          Int? // had to change this from Int?
  block_id              String?
  shape_id              String?
  wheelchair_accessible Int? // had to change this from Int?
  bikes_allowed         Int? // had to change this from Int?
  updated_at            DateTime

  @@index([shape_id], map: "idx_trips_shape_id")
  @@index([block_id], map: "idx_trips_block_id")
  @@index([direction_id], map: "idx_trips_direction_id")
  @@index([service_id], map: "idx_trips_service_id")
  @@index([route_id], map: "idx_trips_route_id")
}

model vehicle_positions {
  tc_agency_id String
  update_id    String   @id
  bearing      Float?
  latitude     Float?
  longitude    Float?
  speed        Float?
  trip_id      String?
  vehicle_id   String?
  timestamp    String?
  isUpdated    Int      @default(1)
  updated_at   DateTime

  @@index([vehicle_id], map: "idx_vehicle_positions_vehicle_id")
  @@index([trip_id], map: "idx_vehicle_positions_trip_id")
  @@index([update_id], map: "idx_vehicle_positions_update_id")
}
